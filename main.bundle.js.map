{"version":3,"sources":["./src/$_lazy_route_resource lazy","./src/app/about/about.component.css","./src/app/about/about.component.html","./src/app/about/about.component.ts","./src/app/app-routing.module.ts","./src/app/app.component.css","./src/app/app.component.html","./src/app/app.component.ts","./src/app/app.module.ts","./src/app/customer-data.service.ts","./src/app/customer.ts","./src/app/customers/customers.component.css","./src/app/customers/customers.component.html","./src/app/customers/customers.component.ts","./src/app/login/login.component.css","./src/app/login/login.component.html","./src/app/login/login.component.ts","./src/environments/environment.ts","./src/main.ts"],"names":[],"mappings":"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","file":"main.bundle.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncatched exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tthrow new Error(\"Cannot find module '\" + req + \"'.\");\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/$$_lazy_route_resource lazy\n// module id = ./src/$$_lazy_route_resource lazy recursive\n// module chunks = main","module.exports = \"\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/about/about.component.css\n// module id = ./src/app/about/about.component.css\n// module chunks = main","module.exports = \"<div class=\\\"view\\\">\\n    <div class=\\\"container\\\">\\n        <header>\\n            <h3><span class=\\\"glyphicon glyphicon-info-sign\\\"></span> About</h3>\\n        </header>\\n        <br />\\n        <div class=\\\"container\\\">\\n            <div class=\\\"row\\\">\\n                <div class=\\\"span2\\\">Created by:</div>\\n                <div class=\\\"span9\\\"><a href=\\\"http://twitter.com/DanWahlin\\\" target=\\\"_blank\\\">Dan Wahlin</a></div>\\n            </div>\\n            <br />\\n            <div class=\\\"row\\\">\\n                <div class=\\\"span2\\\">Blog:</div>\\n                <div class=\\\"span9\\\"><a href=\\\"http://weblogs.asp.net/dwahlin\\\" target=\\\"_blank\\\">weblogs.asp.net/dwahlin</a></div>\\n            </div>\\n            <br />\\n            <div class=\\\"row\\\">\\n                <div class=\\\"span2\\\">GitHub:</div>\\n                <div class=\\\"span9\\\"><a href=\\\"https://github.com/DanWahlin/CustomerManagerStandard\\\" target=\\\"_blank\\\">https://github.com/DanWahlin/CustomerManagerStandard</a></div>\\n            </div>\\n            <br />\\n            <div class=\\\"row\\\">\\n                <div class=\\\"span2\\\">Training:</div>\\n                <div class=\\\"span9\\\"><a href=\\\"mailto:training@wahlinconsulting.com\\\" target=\\\"_blank\\\">Interested in hands-on AngularJS Training? Contact us for details.</a></div>\\n            </div>\\n        </div>\\n    </div>\\n</div>\\n\\n\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/about/about.component.html\n// module id = ./src/app/about/about.component.html\n// module chunks = main","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-about',\n  templateUrl: './about.component.html',\n  styleUrls: ['./about.component.css']\n})\nexport class AboutComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/about/about.component.ts","import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\n\nimport { LoginComponent } from './login/login.component';\nimport { AboutComponent } from './about/about.component';\nimport { CustomersComponent } from './customers/customers.component';\n\n\n\n\nconst routes: Routes = [\n  { path: 'login', component: LoginComponent },\n  { path: 'about', component: AboutComponent },\n  { path: 'customers', component: CustomersComponent }\n];\n\n\n\n@NgModule({\n\nimports: [ RouterModule.forRoot(routes) ],\n exports: [ RouterModule ]\n\n})\nexport class AppRoutingModule { }\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/app-routing.module.ts","module.exports = \"\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/app.component.css\n// module id = ./src/app/app.component.css\n// module chunks = main","module.exports = \"<nav class=\\\"navbar  navbarHeaderStyle\\\">\\n  <div class=\\\"container-fluid\\\">\\n    <div class=\\\"navbar-header\\\">\\n     <img src=\\\"assets\\\\images\\\\people.png\\\" height=\\\"42\\\" width=\\\"42\\\">\\n    </div>\\n    <ul class=\\\"nav navbar-nav\\\">\\n      <li><a class =\\\"menuStyle\\\" style=\\\"font-size:18px\\\" href=\\\"#\\\">CustomerManagement</a></li>\\n      <li><a class =\\\"menuStyle\\\" href=\\\"/customers\\\">customers</a> </li>\\n      <li><a class =\\\"menuStyle\\\" href=\\\"#\\\">Orders</a></li>\\n      <li><a class =\\\"menuStyle\\\" routerLink=\\\"/about\\\">About</a></li>\\n       <li><a class =\\\"menuStyle\\\" routerLink=\\\"/login\\\">Login</a></li>\\n    </ul>\\n  </div>\\n</nav>\\n <div>\\n<router-outlet></router-outlet>\\n</div> \\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/app.component.html\n// module id = ./src/app/app.component.html\n// module chunks = main","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = 'app';\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/app.component.ts","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\n\nimport { AppComponent } from './app.component';\nimport { LoginComponent } from './login/login.component';\nimport { AppRoutingModule } from './/app-routing.module';\nimport { RouterModule, Routes } from '@angular/router';\nimport { AngularFontAwesomeModule } from 'angular-font-awesome';\nimport { AboutComponent } from './about/about.component';\nimport { CustomersComponent } from './customers/customers.component';\nimport {CustomerDataService } from './customer-data.service'\n\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    LoginComponent,\n    AboutComponent,\n    CustomersComponent\n  ],\n  imports: [\n    BrowserModule,FormsModule,AngularFontAwesomeModule,AppRoutingModule\n  ],\n  providers: [CustomerDataService],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/app.module.ts","import { Injectable } from '@angular/core';\nimport { Customer } from './customer';\nimport { Observable } from 'rxjs/Observable';\nimport { of } from 'rxjs/observable/of';\n\n\n@Injectable()\nexport class CustomerDataService {\n\n  customers:Customer[]= [];\n  constructor() {\n\n  \n   }\n\n\n\n   lastId: number = 0;\n\n    public addCustomer(customer: Customer): CustomerDataService {\n    if (!customer.customerId) {\n      customer.customerId = ++this.lastId;\n    }\n\n    this.customers.push(customer);\n    return this;\n  }\n\n  // Simulate DELETE /todos/:id\n  public deleteCustomerById(id: number): CustomerDataService {\n    this.customers = this.customers\n      .filter(customer => customer.customerId !== id);\n    return this;\n  }\n\n  // Simulate PUT /todos/:id\n   public updateCustomerById(id: number, values: Object = {}): Customer {\n    let customer = this.getCustomerById(id);\n    if (!customer) {\n      return null;\n    }\n    Object.assign(customer, values);\n    return customer;\n  }\n\n  // Simulate GET /todos\n   public getAllCustomers(): Observable<Customer[]> {\n    return of(this.customers);\n  }\n\n  // Simulate GET /todos/:id\n   public getCustomerById(id: number): Customer {\n    return this.customers\n      .filter(customer => customer.customerId === id)\n      .pop();\n  }\n\n// Toggle todo complete\n  toggleCustomerComplete(customer: Customer){\n    let updatedTodo = this.updateCustomerById(customer.customerId, {\n      complete: !customer.complete\n    });\n    return updatedTodo;\n  }\n\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/customer-data.service.ts","export class Customer {\n\n customerId:number;\n firstName:String;\n lastName:String;\n gender:String;\n email:String;\n address:String;\n city:String;\n state:String;\n zip:number;\n orderCount:number;\n complete:boolean = false;\n\n\n  constructor(values: Object = {}) {\n    Object.assign(this, values);\n  }\n\n\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/customer.ts","module.exports = \".cardImage{\\n\\theight: 50px;\\n\\n}\\n.cardHeader{\\n\\tbackground-color: blue;\\n\\t\\n}\\n.cardBody{\\n\\n    display: inline;\\n}\\n.clearfix{\\n\\t display: inline;\\n}\\n.card{\\n\\t display: inline;\\n}\\n\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/customers/customers.component.css\n// module id = ./src/app/customers/customers.component.css\n// module chunks = main","module.exports = \"<div class=\\\"customersView\\\" >\\n\\n<div class=\\\"container\\\">\\n        <header>\\n            <h3><span class=\\\"glyphicon glyphicon-user\\\"></span> Customers</h3>\\n        </header>\\n        <div class=\\\"row\\\">\\n            <div class=\\\"col-md-10\\\">\\n                <div class=\\\"navbar\\\">\\n                    <ul class=\\\"nav navbar-nav\\\">\\n                        <li data-ng-class=\\\"{active: !show\\\" class=\\\"toolbaritem\\\">\\n                            <a (click)=\\\"changeDisplayMode()\\\">\\n                                <span class=\\\"glyphicon glyphicon-th-large\\\"></span> Card View\\n                                <p>{{show}}</p>\\n                            </a>\\n                        </li>\\n                        <li data-ng-class=\\\"{active:show}\\\" class=\\\"toolbaritem\\\">\\n                            <a (click)=\\\"changeDisplayMode()\\\">\\n                                <span class=\\\"glyphicon glyphicon-align-justify\\\"></span> List View\\n                            </a>\\n                        </li>\\n                        <li class=\\\"toolbaritem\\\">\\n                            <a (click)=\\\"changeFormDisplayMode()\\\" >\\n                                <span class=\\\"glyphicon glyphicon-plus\\\"></span> Add Customer\\n                            </a>\\n                        </li>\\n                    </ul>\\n                    <form class=\\\"navbar-form navbar-right\\\">\\n                        <div class=\\\"form-group\\\">\\n                            <label class=\\\"navbarText col-sm-2\\\">Filter:</label>\\n                            <div class=\\\"col-sm-10\\\">\\n                                <input type=\\\"text\\\"\\n                                       data-ng-model=\\\"vm.searchText\\\"\\n                                       data-ng-change=\\\"vm.searchTextChanged()\\\"\\n                                       class=\\\"novalidate form-control\\\" />\\n                            </div>\\n                        </div>\\n                    </form>\\n                </div>\\n            </div>\\n        </div>\\n    \\n</div>\\n\\n<section *ngIf=\\\"!showForm\\\">\\n\\n Customer Form\\n\\n FirstName : <input class=\\\"newCustomer\\\"   [(ngModel)]=\\\"newCustomer.firstName\\\" ><br>\\n\\n LastName : <input class=\\\"newCustomer\\\"   [(ngModel)]=\\\"newCustomer.lastName\\\" ><br>\\n\\n  Gender : <input class=\\\"newCustomer\\\"   [(ngModel)]=\\\"newCustomer.gender\\\" ><br>\\n\\n city : <input class=\\\"newCustomer\\\"   [(ngModel)]=\\\"newCustomer.city\\\" ><br>\\n\\n state : <input class=\\\"newCustomer\\\"   [(ngModel)]=\\\"newCustomer.state\\\" ><br>\\n\\n Zip : <input class=\\\"newCustomer\\\"   [(ngModel)]=\\\"newCustomer.zip\\\" ><br>\\n\\n orderCount : <input class=\\\"newCustomer\\\"   [(ngModel)]=\\\"newCustomer.orderCount\\\" ><br>\\n\\n<button  (click)=\\\"addCustomer()\\\" > submit </button>\\n\\n</section>\\n\\n <section *ngIf=\\\"show\\\">\\n<p>Card view </p>\\n <ul class=\\\"cusotmer-list\\\">\\n<table>\\n<li *ngFor=\\\"let customer of customers\\\" class=\\\"card\\\">\\n<tr><td colspan=\\\"2\\\">\\n    <div class=\\\"cardHeader\\\"><a href=\\\"#/customeredit/{{customer.id}}\\\" class=\\\"white\\\">{{customer.firstName + ' ' + customer.lastName}} <i class=\\\"icon-edit icon-white editIcon\\\"></i></a></div>\\n\\n    </td><td></td>\\n   </tr>        \\n<tr>\\n\\n\\n            \\n                    <td>\\n                                <div class=\\\"card\\\">\\n                                    <a href=\\\"#/customeredit/{{customer.id}}\\\" class=\\\"white\\\"><img src=\\\"assets\\\\images\\\\{{customer.gender | lowercase}}.png\\\" class=\\\"cardImage\\\" /></a>\\n                                </div>\\n                    </td>\\n\\n                    <td>\\n                                <div class=\\\"card\\\">\\n                                    <div class=\\\"cardBodyContent\\\">{{customer.city}}, {{customer.state}}</div>\\n                                    <div>\\n                                        <a href=\\\"#/customerorders/{{customer.id}}\\\" class=\\\"btn-link\\\">\\n                                            {{ customer.orderCount }} \\n                                            <span data-ng-pluralize count=\\\"customer.orderCount\\\"\\n                                                  when=\\\"{'1': 'Order','other': 'Orders'}\\\">\\n                                            </span>\\n                                        </a>\\n                                    </div>\\n                                </div>\\n                    </td> \\n \\n\\n  </tr>\\n</li>\\n</table>\\n</ul>\\n</section> \\n\\n<section *ngIf=\\\"!show\\\">\\n\\n<p> Listview view </p>\\n\\n\\n\\n\\n</section>\\n\\n\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/customers/customers.component.html\n// module id = ./src/app/customers/customers.component.html\n// module chunks = main","import { Component, OnInit } from '@angular/core';\nimport {CustomerDataService } from '../customer-data.service'\nimport {Customer} from '../customer'\n\n@Component({\n  selector: 'app-customers',\n  templateUrl: './customers.component.html',\n  styleUrls: ['./customers.component.css']\n})\nexport class CustomersComponent implements OnInit {\n\n   show:boolean = false;\n\n   showForm:boolean =false;\n\n   colorName:String = \"Show\";\n\n  public customers:Customer[];\n\n  constructor(private customerDataService:CustomerDataService) {\n\n  let customer:Customer= new Customer();\n \n  customer.customerId=1;\n  customer.firstName=\"sandeep\";\n  customer.lastName=\"singh\";\n  customer.city=\"varanasi\";\n  customer.email=\"sandeep12747@gmail.com\";\n  customer.complete=false;\n  customer.gender=\"male\";\n  customer.state=\"up\";\n  customer.orderCount=7;\n  customer.zip=221002;\n\n  customerDataService.addCustomer(customer);\n }\n\n  ngOnInit() {\n\n    this.getCustomers();\n  }\n\n  changeFormDisplayMode(){\n\n    this.showForm = !this.showForm;\n\n  }\n\n\n   changeDisplayMode(){\n\n     console.log(\"changeDisplayMode\");\n     this.show = !this.show;\n\n   }\n   \n\n  newCustomer : Customer = new Customer();\n  \n  addCustomer(){\n   this.customerDataService.addCustomer(this.newCustomer);\n   this.newCustomer = new Customer();\n  }\n\n  toggleTodoComplete(customer) {\n    this.customerDataService.toggleCustomerComplete(customer);\n  }\n\n  removeTodo(customer) {\n    this.customerDataService.deleteCustomerById(customer);\n  }\n\n  getCustomers():void{\n \n    this.customerDataService.getAllCustomers().subscribe(customers => this.customers = customers);\n \n  }\n\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/customers/customers.component.ts","module.exports = \"\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/login/login.component.css\n// module id = ./src/app/login/login.component.css\n// module chunks = main","module.exports = \"<div class=\\\"view\\\">\\n    <div class=\\\"container\\\">\\n        <header>\\n            <h3><span class=\\\"glyphicon glyphicon-lock\\\"></span> Login</h3>\\n        </header>\\n        <form name=\\\"loginForm\\\" novalidate>\\n            <div class=\\\"login\\\">\\n                <div class=\\\"row\\\">\\n                    <div class=\\\"col-md-2\\\">\\n                        Email:\\n                    </div>\\n                    <div class=\\\"col-md-10\\\">\\n                        <input type=\\\"email\\\" name=\\\"email\\\" class=\\\"inputTypeStyle\\\"  />\\n                        <span class=\\\"errorMessage\\\" ng-show=\\\"loginForm.email.$touched && loginForm.email.$invalid\\\" >\\n                            Email is required\\n                        </span>\\n                    </div>\\n                </div>\\n                <br />\\n                <div class=\\\"row\\\">\\n                    <div class=\\\"col-md-2\\\">\\n                        Password:\\n                    </div>\\n                    <div class=\\\"col-md-10\\\">\\n                        <input type=\\\"password\\\" name=\\\"password\\\" class=\\\"\\\" />\\n                        <span class=\\\"errorMessage\\\" >\\n                            Password is required\\n                        </span>\\n                    </div>\\n                </div>\\n                <br />\\n                <div class=\\\"row\\\">\\n                    <div class=\\\"col-md-12\\\">\\n                        <button type=\\\"submit\\\" class=\\\"btn btn-primary\\\" >\\n                            Login\\n                        </button>\\n                    </div>\\n                </div>\\n                <br />\\n                <!-- <div class=\\\"statusRow\\\">\\n                    <br />\\n                    <div class=\\\"label label-important\\\" data-ng-show=\\\"vm.errorMessage\\\">\\n                        <span class=\\\"glyphicon glyphicon-thumbs-down icon-white\\\"></span>&nbsp;&nbsp;Error: {{ vm.errorMessage }}\\n                    </div>\\n                </div> -->\\n            </div>\\n        </form>\\n    </div>\\n</div>\\n\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/login/login.component.html\n// module id = ./src/app/login/login.component.html\n// module chunks = main","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css']\n})\nexport class LoginComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/login/login.component.ts","// The file contents for the current environment will overwrite these during build.\n// The build system defaults to the dev environment which uses `environment.ts`, but if you do\n// `ng build --env=prod` then `environment.prod.ts` will be used instead.\n// The list of which env maps to which file can be found in `.angular-cli.json`.\n\nexport const environment = {\n  production: false\n};\n\n\n\n// WEBPACK FOOTER //\n// ./src/environments/environment.ts","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.log(err));\n\n\n\n// WEBPACK FOOTER //\n// ./src/main.ts"],"sourceRoot":"webpack:///"}